include <Wire.h>
#include <WiFi.h>
#include <WebSocketsClient.h>
#include <Adafruit_SHT31.h>
#include <Adafruit_LPS33HW.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_TSL2591.h>
#include <SoftwareSerial.h>
#include "SPS30.h"

#define WIND_SPEED_PIN 34
#define WIND_DIR_PIN 35
#define RAIN_SENSOR_PIN 32
#define SOLAR_SENSOR_PIN 33

const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";
const char* websocket_server = "192.168.1.100";

WebSocketsClient webSocket;
Adafruit_SHT31 sht35 = Adafruit_SHT31();
Adafruit_LPS33HW lps33hw;
Adafruit_TSL2591 tsl2591 = Adafruit_TSL2591(2591);
SPS30 sps30;

// Fonction pour envoyer les données
void sendWeatherData(float temperature, float humidity, float pressure, float wind_speed, int wind_dir, float solar, float rain, float visibility, float pm25) {
    String data = "{\"temperature\":" + String(temperature) + 
                  ",\"humidity\":" + String(humidity) +
                  ",\"pressure\":" + String(pressure) +
                  ",\"wind_speed\":" + String(wind_speed) +
                  ",\"wind_direction\":" + String(wind_dir) +
                  ",\"solar_radiation\":" + String(solar) +
                  ",\"rain\":" + String(rain) +
                  ",\"visibility\":" + String(visibility) +
                  ",\"pm25\":" + String(pm25) + "}";

    webSocket.sendTXT(data);
}

// Fonction de calcul du point de rosée
float calculateDewPoint(float temp, float humidity) {
    double a = 17.27, b = 237.7;
    double alpha = ((a * temp) / (b + temp)) + log(humidity / 100.0);
    return (b * alpha) / (a - alpha);
}

// Lecture de la vitesse du vent (Exemple : impulsions par tour converties en m/s)
float getWindSpeed() {
    int pulseCount = pulseIn(WIND_SPEED_PIN, HIGH, 1000000);
    return (pulseCount / 2.0) * 0.1; // Exemple de conversion
}

// Lecture de la direction du vent
int getWindDirection() {
    return analogRead(WIND_DIR_PIN) / 4; // Exemple de conversion sur 360°
}

// Lecture du capteur de précipitations
float getRainfall() {
    return analogRead(RAIN_SENSOR_PIN) * 0.1; // Conversion en mm
}

// Lecture du capteur de rayonnement solaire
float getSolarRadiation() {
    return analogRead(SOLAR_SENSOR_PIN) * 0.5; // Conversion en W/m²
}

// Gestion des WebSockets
void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
    if (type == WStype_TEXT) {
        Serial.printf("Message reçu: %s\n", payload);
    }
}

void setup() {
    Serial.begin(115200);
    Wire.begin();

    // Initialisation des capteurs
    if (!sht35.begin(0x44)) {
        Serial.println("Erreur: SHT35 non détecté !");
    }

    if (!lps33hw.begin_I2C()) {
        Serial.println("Erreur: LPS33HW non détecté !");
    }

    if (!tsl2591.begin()) {
        Serial.println("Erreur: TSL2591 non détecté !");
    }

    sps30.begin();

    // Connexion WiFi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connexion WiFi...");
    }
    Serial.println("Connecté au WiFi");

    // Connexion WebSocket
    webSocket.begin(websocket_server, 8080, "/ws/weather/");
    webSocket.onEvent(webSocketEvent);
}

void loop() {
    webSocket.loop();

    // Lecture des capteurs
    float temperature = sht35.readTemperature();
    float humidity = sht35.readHumidity();
    float pressure = lps33hw.readPressure();
    float wind_speed = getWindSpeed();
    int wind_dir = getWindDirection();
    float solar_radiation = getSolarRadiation();
    float rainfall = getRainfall();
    float visibility = tsl2591.getLuminosity(TSL2591_VISIBLE);
    float pm25 = sps30.getPM2_5();

    // Calcul du point de rosée
    float dew_point = calculateDewPoint(temperature, humidity);

    // Affichage des données
    Serial.printf("Température: %.2f°C\n", temperature);
    Serial.printf("Humidité: %.2f%%\n", humidity);
    Serial.printf("Pression: %.2f hPa\n", pressure);
    Serial.printf("Vitesse du vent: %.2f m/s\n", wind_speed);
    Serial.printf("Direction du vent: %d°\n", wind_dir);
    Serial.printf("Rayonnement solaire: %.2f W/m²\n", solar_radiation);
    Serial.printf("Précipitations: %.2f mm\n", rainfall);
    Serial.printf("Visibilité: %.2f lx\n", visibility);
    Serial.printf("PM2.5: %.2f µg/m³\n", pm25);
    Serial.printf("Point de rosée: %.2f°C\n", dew_point);

    // Envoi des données
    sendWeatherData(temperature, humidity, pressure, wind_speed, wind_dir, solar_radiation, rainfall, visibility, pm25);

    delay(2000);
}
